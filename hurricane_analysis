# HURRICANE ANALYSIS Project on Codecademy. Useful examples of list and dictionary manipulation
# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# write your update damages function here:
def damages_upd(damages):
  damages_upd_list = []
  for i in damages:
    if i == "Damages not recorded":
      damages_upd_list.append(i)
    elif i.find("M") > -1:
      i = i.replace("M", "")
      i = float(i)*1000000
      damages_upd_list.append(i)
    else:
      i = i.replace("B", "")
      i = float(i)*1000000000
      damages_upd_list.append(i)
  return damages_upd_list

damages_upd_list = damages_upd(damages)
#print(damages_upd(damages))


# write your construct hurricane dictionary function here:
def hur_dict_names(names, months, years, max_sustained_winds, areas_affected, damages_upd_list, deaths):
  hurricanes = {}
  num_hurricanes = len(names)
  for i in range(num_hurricanes):
    hurricanes[names[i]] = {"Name": names[i],
                            "Month": months[i],
                            "Year": years[i],
                            "Max Sustained Wind": max_sustained_winds[i],
                            "Areas Affected": areas_affected[i],
                            "Damage": damages_upd_list[i],
                            "Deaths": deaths[i]}
  return hurricanes

hurricanes = hur_dict_names(names, months, years, max_sustained_winds, areas_affected, damages_upd_list, deaths)
#print(hur_dict_names(names, months, years, max_sustained_winds, areas_affected, damages_upd_list, deaths))


# write your construct hurricane by year dictionary function here:
def hur_dict_years(hurricanes):
  hur_by_year = {}
  for i in hurricanes:
    year = hurricanes[i]["Year"]
    name = hurricanes[i]
    if year not in hur_by_year:
      hur_by_year[year] = [name]
    else:
      hur_by_year[year].append(name)
  return hur_by_year


hur_by_year = hur_dict_years(hurricanes)
#print(hur_by_year[1932])


# write your count affected areas function here:
def count_affected_areas(hurricanes):
  count_affected = {}
  for value in hurricanes.values():
    for i in value["Areas Affected"]:
      if i not in count_affected:
        count_affected[i] = 1
      else:
        count_affected[i] += 1
  return count_affected
    
count_affected = count_affected_areas(hurricanes)
#print(count_affected_areas(hurricanes))


# write your find most affected area function here:
def most_affected_areas(count_affected):
  most_affected = {}
  count = 0
  for k, v in count_affected.items():
    if v > count:
      most_affected[k] = v
      count = v
  return most_affected
  

most_affected = most_affected_areas(count_affected)
#print(most_affected_areas(count_affected))


# write your greatest number of deaths function here:
def greatest_death(hurricanes):
  max_death = ""
  count = 0
  for i in hurricanes:
    if hurricanes[i]["Deaths"] > count:
      max_death = i
      count = hurricanes[i]["Deaths"]
  return max_death, count

max_death, count = greatest_death(hurricanes)
#print(greatest_death(hurricanes))


# write your catgeorize by mortality function here:
def mortality_scale(hurricanes):
  m_scale = {}
  zero_list = []
  one_list = []
  two_list = []
  three_list = []
  four_list = []
  for k, v in hurricanes.items():
    if hurricanes[k]["Deaths"] == 0:
     zero_list.append(v)
     m_scale[0] = zero_list
    elif hurricanes[k]["Deaths"] <= 100:
     one_list.append(v)
     m_scale[1] = one_list
    elif hurricanes[k]["Deaths"] <= 500:
     two_list.append(v)
     m_scale[2] = two_list
    elif hurricanes[k]["Deaths"] <= 1000:
     three_list.append(v)
     m_scale[3] = three_list
    elif hurricanes[k]["Deaths"] <= 10000:
     four_list.append(v)
     m_scale[4] = four_list
  return m_scale


m_scale = mortality_scale(hurricanes)
for key in sorted(m_scale):
    print("\n{} -- {}".format(key, m_scale[key]))

    
# write your greatest damage function here:
def greatest_damage(hurricanes):
  damage = 0
  cane = ""
  for i in hurricanes:
    if hurricanes[i]["Damage"] == "Damages not recorded":
      pass   
    elif hurricanes[i]["Damage"] > damage:
      damage = hurricanes[i]["Damage"]
      cane = i
  return cane, damage

 
#print(greatest_damage(hurricanes))


# write your catgeorize by damage function here:
def damage_scale(hurricanes):
  damage_scale = {0: 0,
                  1: 100000000,
                  2: 1000000000,
                  3: 10000000000,
                  4: 50000000000}
  hurricanes_by_damage = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
  for i in hurricanes:
    total_damage = hurricanes[i]["Damage"]
    if total_damage == "Damages not recorded":
      hurricanes_by_damage[0].append(hurricanes[i])
    elif total_damage == damage_scale[0]:
      hurricanes_by_damage[0].append(hurricanes[i])
    elif total_damage > damage_scale[0] and total_damage < damage_scale[1]:
      hurricanes_by_damage[1].append(hurricanes[i])
    elif total_damage > damage_scale[1] and total_damage < damage_scale[2]:
      hurricanes_by_damage[2].append(hurricanes[i])
    elif total_damage > damage_scale[2] and total_damage < damage_scale[3]:
      hurricanes_by_damage[3].append(hurricanes[i])
    elif total_damage > damage_scale[3] and total_damage < damage_scale[4]:
      hurricanes_by_damage[4].append(hurricanes[i])
    elif total_damage > damage_scale[4]:
      hurricanes_by_damage[5].append(hurricanes[i])
  return hurricanes_by_damage


dam_scale = damage_scale(hurricanes)

for i in sorted(dam_scale):
  print("\n{} ---> {}".format(i, dam_scale[i]))
